/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ju.ehealthservice.system;


import ju.ehealthservice.connections.XivelyFeeder;
import com.google.gson.Gson;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import javax.swing.Timer;
import ju.ehealthservice.connections.SerialSensorConnector;
import ju.ehealthservice.connections.UDPReader;
import ju.ehealthservice.ecg.ECGRecorder;
import ju.ehealthservice.resprate.RespRecorder;
import ju.ehealthservice.patient.Patient;



/**
 *
 * @author SMCC
 */
public class GUIMonitorPanel implements Observer {

    /**
     * Creates new form GUIMonitorPanel
     */
    private Patient thePatient;
    private SerialSensorConnector serialSensor;
    private UDPReader udpSensor;
    //Thread WiFiReaderThread;
    private XivelyFeeder xivelyFeeder;
    
    private Timer t;
    private Timer t1;
    
    private RespRecorder respRecorder;
    private ECGRecorder ecgRecorder;
    private boolean monitoringUSB = false;
    private boolean monitoringWiFi = false;
    private boolean periodicUpdate = false;
    private Gson gson = new Gson();
    public GUIMonitorPanel() {
        
    }
    public void setSerialSensor(SerialSensorConnector sSensor){
        serialSensor = sSensor;
    }
    public void setWiFiSensor(UDPReader sSensor){
        udpSensor = sSensor;
    }
    public void setCurrentPatient(Patient patient){
        thePatient = patient;
        refreshPatientData();
    }
    
    public void setXivelyFeeder(XivelyFeeder xively){
        xivelyFeeder = xively;
    }

    public void setECGRecorder(ECGRecorder ecgR){
        ecgRecorder = ecgR;
    }
    public void setRespRecorder(RespRecorder respR){
        respRecorder = respR;
    }
    @Override
    public void update(Observable o, Object arg) {
        refreshPatientData();
    }
    public HashMap<String,String> refreshPatientData(){
        HashMap<String, String> patientDetails = new HashMap<>(14);
        patientDetails.put("BP DIA", getThePatient().bpdia);
        patientDetails.put("BP SYS", getThePatient().bpsys);
        patientDetails.put("Air Flow", getThePatient().airfw);
        patientDetails.put("Mem", getThePatient().devMem);
        patientDetails.put("ECG", getThePatient().ecg);
        patientDetails.put("Cond", getThePatient().cond);
        patientDetails.put("Res", getThePatient().res);
        patientDetails.put("Temperature", getThePatient().temp);
        patientDetails.put("O2", getThePatient().o2);
        patientDetails.put("BPM", getThePatient().bpm);
        patientDetails.put("Pos", getThePatient().pos);
        patientDetails.put("PatientID", String.valueOf(getThePatient().id));
        patientDetails.put("Age", getThePatient().age);
        patientDetails.put("Name",getThePatient().name);
        return patientDetails;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void cmdDBActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        performDBAction();
    }                                     
    private void performDBAction(){
        
        /*try {
            String dd = getTxtID().getText();
            if(dd.equals("")){
                dd="0";
            }
            int idt = Integer.parseInt(dd);
            if (idt == 0 ) {
                if (!lblPName.getText().equals("") && !lblAge.getText().equals("")) {
                    //String id = txtID.getText();
                    //if(!id.equals("") && !healthDB.hasID(id)){
                        int ids = getHealthDB().insert(getThePatient());
                        if (ids != 0) {
                            getLblConsole().setText("Successfully Stored... id is " + ids + " ");
                            thePatient.id = ids;
                            getTxtID().setText(String.valueOf(ids));
                            
                        } else {
                            getLblConsole().setText("Failed...");
                        }
                        //}
                } else {
                    getLblConsole().setText("Name and Age Required");
                }
            } else {
                String id = getTxtID().getText();
                if (!lblPName.getText().equals("") && !lblAge.getText().equals("")) {
                    if (getHealthDB().hasID(id)) {
                        if (getHealthDB().Update(getThePatient())) {
                            getLblConsole().setText("Successfully Updated...");
                            getThePatient().notifyPatientObservers(getThePatient().parameterChange);
                            this.setCurrentPatient(getThePatient());
                            getEcgRecorder().redrawEcgPanel();
                            getRespRecorder().redrawRespPanel();
                        } else {
                            getLblConsole().setText("Failed...");
                        }
                    } else {
                        getLblConsole().setText("Invalid ID");
                    }
                } else {
                    getLblConsole().setText("Name and Age Required");
                }
            }

        } catch (Exception e) {
            System.out.println(e + "hoho"+ getHealthDB().toString());
        }*/
    }
    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handling code here:
        /*getLblPName().setText(getTxtName().getText());
        thePatient.name = getTxtName().getText();*/
    }                                   

    private void txtIDFocusLost(java.awt.event.FocusEvent evt) {                                
        // TODO add your handling code here:
        /**if (getTxtID().getText().equals("")) {
            getCmdReset().doClick();
        }/
    }                               

    private void txtAgeKeyReleased(java.awt.event.KeyEvent evt) {                                   
        // TODO add your handling code here:
        /*getLblPAge().setText(getTxtAge().getText());
        thePatient.age = getTxtAge().getText();*/
    }                                  

    private void cmdMonitorActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        /*if (!isMonitoringUSB()) {
            getCmdMonitor().setText("Stop Monitoring USB");
            monitoringUSB = true;
            getSerialSensor().startMonitoring(getThePatient());
            getXivelyFeeder().setPatient(getThePatient());
            getThePatient().EcgGraph.clear();
            getEcgRecorder().setEcgGraph(getThePatient().EcgGraph);
            getEcgRecorder().redrawEcgPanel();
            getEcgRecorder().startEcgRecording();
            getThePatient().RespGraph.clear();
            getRespRecorder().setRespGraph(getThePatient().RespGraph);
            getRespRecorder().redrawRespPanel();
            getRespRecorder().startRespRecording();
            getTxtID().setEnabled(false);
            getCmdView().setEnabled(false);
            getLblConsole().setText("Monitoring via USB...");
            getCmdRecord().setText("BP Record");
            getCmdRecord().setEnabled(true);
        } else {
            getCmdMonitor().setText("Start Monitoring USB");
            monitoringUSB = false;
            getSerialSensor().stopMonitoring();
            getEcgRecorder().stopEcgRecording();
            getRespRecorder().stopRespRecording();
            getTxtID().setEnabled(true);
            getCmdView().setEnabled(true);
            getLblConsole().setText("Monitoring Stopped.");
            getCmdRecord().setText("BP Record");
            getCmdRecord().setEnabled(true);
        }*/
    }                                          

    private HashMap<String, String> cmdResetActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        HashMap<String, String> patientDetails = new HashMap<>(14);
        /*patientDetails.put("BP DIA", "0");
        patientDetails.put("BP SYS", "0");
        patientDetails.put("Air Flow", "0");
        patientDetails.put("Mem", getThePatient().devMem);//what to do
        patientDetails.put("ECG", "ECG");
        patientDetails.put("Cond", "0");
        patientDetails.put("Res", "0");
        patientDetails.put("Temperature", "0");
        patientDetails.put("O2", "0");
        patientDetails.put("BPM", "0");
        patientDetails.put("Pos", "Idle");
        patientDetails.put("PatientID", "");
        patientDetails.put("Age", "");
        patientDetails.put("Name","");
        
        if (isMonitoringUSB()) {
            getCmdMonitor().doClick();
        }
        if (isMonitoringWiFi()) {
            getCmdMonitorWiFi().doClick();
        }

        thePatient.id = 0;
        thePatient.name = "";
        thePatient.age = "";
        thePatient.bpsys = "0";
        thePatient.bpdia = "0";
        thePatient.airfw = "0";
        thePatient.bpm = "0";
        thePatient.o2 = "0";
        thePatient.temp = "0.0";
        thePatient.pos = "Idle";
        thePatient.cond = "0";
        thePatient.res = "0";

        getThePatient().EcgGraph.clear();
        getEcgRecorder().setEcgGraph(getThePatient().EcgGraph);
        getEcgRecorder().redrawEcgPanel();
        

        getThePatient().RespGraph.clear();
        getRespRecorder().setRespGraph(getThePatient().RespGraph);
        getRespRecorder().redrawRespPanel();
        

        /*getLblConsole().setText("Reset Success ");*/
        return patientDetails;
    }                                        

    private void cmdViewActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        /*if (isMonitoringUSB()) {
            getCmdMonitor().doClick();
        }
        if (isMonitoringWiFi()) {
            getCmdMonitorWiFi().doClick();
        }
        //Fetch data from db if id valid TODO
        if (!txtID.getText().equals("")) {
            String id = getTxtID().getText();
            try {
                thePatient = getHealthDB().getPatientDatabyId(id);
               if (getThePatient() != null) {
                    getThePatient().addObserver(this);
                  
                    refreshPatientData();
                    getXivelyFeeder().setPatient(getThePatient());
                    getThePatient().notifyPatientObservers(!thePatient.parameterChange);
                    getEcgRecorder().setPatient(getThePatient());
                    getRespRecorder().setPatient(getThePatient());
                    getEcgRecorder().setEcgGraph(getThePatient().EcgGraph);
                    getRespRecorder().setRespGraph(getThePatient().RespGraph);
                    getEcgRecorder().redrawEcgPanel();
                    getRespRecorder().redrawRespPanel();
                } else {
                    getLblConsole().setText("Sorry ID does not exist");
                }

            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            getLblConsole().setText("ID Field Required");
        }*/
    }                                       

    private void cmdXivelyActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        /*if(getCmdXively().getText().equals("Start Xively Post")){
            getXivelyFeeder().startPosting(getThePatient(), Integer.parseInt(getTxtXively().getText()));
            getCmdXively().setText("Stop Xively Post");
        }
        else{
            getXivelyFeeder().stopPosting();
            getCmdXively().setText("Start Xively Post");
        }*/
    }                                         

    private void cmdAutoDBActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        /*if(getCmdAutoDB().isSelected()){
            getCmdAutoDB().setText("Auto Updating...");
        t = new Timer(Integer.valueOf(getTxtDBInterval().getText()), new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                performDBAction();
            }
        });
            getT().start();
        }
        else{
            getCmdAutoDB().setText("Auto Update DB");
            getT().stop();
        }*/
    }                                         

    private void cmdMonitorWiFiActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
            /*if (!isMonitoringWiFi()) {
            getCmdMonitorWiFi().setText("Stop Monitoring WiFi");
            monitoringWiFi = true;
            //serialSensor.startMonitoring(thePatient);
            Thread WiFiReaderThread = new Thread(getUdpSensor());
            WiFiReaderThread.start();
            getXivelyFeeder().setPatient(getThePatient());
            getThePatient().EcgGraph.clear();
            getEcgRecorder().setEcgGraph(getThePatient().EcgGraph);
            getEcgRecorder().redrawEcgPanel();
            getEcgRecorder().startEcgRecording();
            getThePatient().RespGraph.clear();
            getRespRecorder().setRespGraph(getThePatient().RespGraph);
            getRespRecorder().redrawRespPanel();
            getRespRecorder().startRespRecording();
            getTxtID().setEnabled(false);
            getCmdView().setEnabled(false);
            getLblConsole().setText("Monitoring via WiFi...");
        } else {
            getCmdMonitorWiFi().setText("Start Monitoring WiFi");
            monitoringWiFi = false;
            //serialSensor.stopMonitoring();
            getUdpSensor().stopUDP();
            getEcgRecorder().stopEcgRecording();
            getRespRecorder().stopRespRecording();
            getTxtID().setEnabled(true);
            getCmdView().setEnabled(true);
            getLblConsole().setText("Monitoring Stopped.");
        }*/
    }                                              

    private void cmdRecordActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        /*getCmdRecord().setEnabled(false);
        getCmdRecord().setText("Connect BP");
        getSerialSensor().requestBP();
        t1 = new Timer(5000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                getCmdRecord().setText("BP Record");
                getCmdRecord().setEnabled(true);
            }
        });
        getT1().start();*/
        
    }                                         

    private void cmbComActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        /*System.out.println("HOHO"+ getCmbCom().getSelectedItem().toString() );
        getSerialSensor().reinitialize(getCmbCom().getSelectedItem().toString());*/
    }                                          

    /**
     * @return the thePatient
     */
    public Patient getThePatient() {
        return thePatient;
    }

    /**
     * @return the healthDB
     */
   
    /**
     * @return the serialSensor
     */
    public SerialSensorConnector getSerialSensor() {
        return serialSensor;
    }

    /**
     * @return the udpSensor
     */
    public UDPReader getUdpSensor() {
        return udpSensor;
    }

    /**
     * @return the xivelyFeeder
     */
    public XivelyFeeder getXivelyFeeder() {
        return xivelyFeeder;
    }

    /**
     * @return the t
     */
    public Timer getT() {
        return t;
    }

    /**
     * @return the t1
     */
    public Timer getT1() {
        return t1;
    }

    /**
     * @return the respRecorder
     */
    public RespRecorder getRespRecorder() {
        return respRecorder;
    }

    /**
     * @return the ecgRecorder
     */
    public ECGRecorder getEcgRecorder() {
        return ecgRecorder;
    }

    /**
     * @return the monitoringUSB
     */
    public boolean isMonitoringUSB() {
        return monitoringUSB;
    }

    /**
     * @return the monitoringWiFi
     */
    public boolean isMonitoringWiFi() {
        return monitoringWiFi;
    }

    /**
     * @return the periodicUpdate
     */
    public boolean isPeriodicUpdate() {
        return periodicUpdate;
    }

    /**
     * @return the gson
     */
    public Gson getGson() {
        return gson;
    }

}
